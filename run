#!/bin/bash

set -euo pipefail

function on_failure {
    echo "The script" "${0##*/}" "has failed"
}

trap on_failure ERR

# pass arguments from cli
while getopts a:c:s:p: option
do
    case "${option}"
        in
        a) atac=${OPTARG};;
        c) cite=${OPTARG};;
        s) samples=${OPTARG};;
        p) params=${OPTARG};;
    esac
done

# housekeeping
TIMESTAMP=$(date +"%Y-%m-%d_%H.%M.%S")
OUT_DIR="output/output_$TIMESTAMP"
mkdir -p $OUT_DIR $OUT_DIR/tmp

declare -a SCRIPTS=(
"preamble.R"
"create-object.R"
"integrate.R"
)

# do check for multimodal routine
if [[ "${atac:-}" == "TRUE" ]]
then
    echo "Creating ATAC object"
    SCRIPTS=("preamble.R" "atac-multi-wnn.R")
    echo "${SCRIPTS[@]}"
    check_end=1
elif [[ "${cite:-}" == "TRUE" ]]
then
    echo "Creating CITE object"
    SCRIPTS=("preamble.R" "cite-wnn.R")
    echo "${SCRIPTS[@]}"
    check_end=1
else
    echo "Creating traditional Seurat object"
fi

# execute pipeline scripts
# for i in $(eval echo "{$check_begin..$check_end}")
for i in "${SCRIPTS[@]}"
do
    echo "coreSC version commit $(git rev-parse --short HEAD)" >> $OUT_DIR/log.txt
    Rscript ./scripts/$i $OUT_DIR 2>&1 | tee -a $OUT_DIR/log.txt
done

cp ./config/params.csv ./config/samples.csv $OUT_DIR
rm -rf $OUT_DIR/tmp

